# pages/iframe_page.py
import streamlit as st
from firebase_config import get_auth, get_firestore
from datetime import datetime
from firebase_admin import firestore
from google.cloud import storage
import os
from google.api_core.exceptions import NotFound
import uuid
from datetime import timedelta

# Get Firebase services
auth = get_auth()
db = get_firestore()



class UserProfile:
 def __init__(self, uid, email):
     self.uid = uid
     self.email = email
     self.db = firestore.client()
 
 def create_or_update(self, additional_data=None):
     """Creates or updates a user profile in Firestore"""
     try:
         user_ref = self.db.collection('users').document(self.uid)
         base_data = {
             'email': self.email,
             'last_login': datetime.now(),
         }
         
         # Check if this is a new user by attempting to get their profile
         existing_profile = user_ref.get()
         if not existing_profile.exists:
             base_data['account_created'] = datetime.now()
         
         # Merge additional data if provided
         if additional_data:
             base_data.update(additional_data)
         
         # Set with merge=True to update existing or create new
         user_ref.set(base_data, merge=True)
         return True
     except Exception as e:
         st.error(f"Error updating user profile: {str(e)}")
         return False

 def get_profile(self):
     """Retrieves user profile from Firestore"""
     try:
         user_ref = self.db.collection('users').document(self.uid)
         doc = user_ref.get()
         if doc.exists:
             return doc.to_dict()
         else:
             # If profile doesn't exist, create a basic one
             self.create_or_update()
             return self.get_profile()
     except Exception as e:
         st.error(f"Error fetching user profile: {str(e)}")
         return None
 
 def update_preferences(self, favorite_team=None, preferred_language=None):
     """Updates user preferences"""
     try:
         preferences = {}
         if favorite_team:
             preferences['favorite_team'] = favorite_team
         if preferred_language:
             preferences['preferred_language'] = preferred_language
         
         if preferences:
             return self.create_or_update({'preferences': preferences})
         return True
     except Exception as e:
         st.error(f"Error updating preferences: {str(e)}")
         return False
 
 def increment_podcasts_generated(self):
     """Increments the count of podcasts generated by the user"""
     try:
         user_ref = self.db.collection('users').document(self.uid)
         user_ref.update({
             'podcasts_generated': firestore.Increment(1)
         })
         return True
     except Exception as e:
         st.error(f"Error updating podcast count: {str(e)}")
         return False
 
 def get_usage_stats(self):
     """Gets usage statistics for the user"""
     try:
         profile = self.get_profile()
         if profile:
             return {
                 'podcasts_generated': profile.get('podcasts_generated', 0),
                 'account_created': profile.get('account_created', None),
                 'last_login': profile.get('last_login', None)
             }
         return None
     except Exception as e:
         st.error(f"Error fetching usage stats: {str(e)}")
         return None
 
 def store_podcast(self, signed_url):
     """Stores the podcast url in the users firestore profile"""
     try:
         user_ref = self.db.collection('users').document(self.uid)
         user_ref.update({
             'podcast_history': firestore.ArrayUnion([signed_url])
         })
         return True
     except Exception as e:
         st.error(f"Error while updating podcast url in user profile: {e}")
         return False


def handle_authentication(email, password, auth_type):
 """Enhanced authentication handler with detailed error handling"""
 try:
     if auth_type == "Sign In":
         user = auth.get_user_by_email(email)
         auth_user = auth.get_user(user.uid)
         st.session_state['user'] = auth_user
         
         # Create/update user profile
         profile = UserProfile(user.uid, email)
         profile.create_or_update()
         
         st.success(f"Welcome back, {email}!")
         return True
         
     else:  # Sign Up
         # Password validation
         if len(password) < 6:
             st.error("Password must be at least 6 characters long")
             return False
             
         user = auth.create_user(email=email, password=password)
         auth_user = auth.get_user(user.uid)
         st.session_state['user'] = auth_user
         
         # Create new user profile
         profile = UserProfile(user.uid, email)
         profile.create_or_update({
             'account_type': 'free',
             'podcasts_generated': 0
         })
         
         st.success(f"Welcome to MLB Podcast Generator, {email}!")
         return True
         
 except auth.EmailAlreadyExistsError:
     st.error("This email is already registered. Please sign in instead.")
 except auth.UserNotFoundError:
     st.error("No account found with this email. Please sign up.")
 except auth.InvalidEmailError:
     st.error("Please enter a valid email address.")
 except auth.WeakPasswordError:
     st.error("Password is too weak. Please choose a stronger password.")
 except Exception as e:
     st.error(f"Authentication error: {str(e)}")
 return False



def sign_in_or_sign_up():
 """Enhanced sign in/sign up form with validation"""
 auth_type = st.radio("Sign In or Sign Up", ["Sign In", "Sign Up"])
 
 with st.form(key='auth_form'):
     email = st.text_input("Email")
     password = st.text_input("Password", type="password")
     submit_button = st.form_submit_button(auth_type)
     
     if submit_button:
         if not email or not password:
             st.error("Please fill in all fields.")
             return
         
         if handle_authentication(email, password, auth_type):
             # Use rerun() to refresh the page after successful authentication
             st.rerun()


def main():
    # Check if user is in session
    if 'user' not in st.session_state:
        st.warning("Please log in to access this page.")
        # Import the sign_in_or_sign_up function from the main script
        
        sign_in_or_sign_up()
        return

    st.title("Looker Studio Report")
    # Add the iframe to this page
    st.components.v1.iframe(
        src="https://lookerstudio.google.com/embed/reporting/57ebdcdb-9526-44d3-9e47-4d01994f6f1c/page/eiCbE",
        width=600,
        height=450,
        scrolling=True
    )

if __name__ == "__main__":
    main()